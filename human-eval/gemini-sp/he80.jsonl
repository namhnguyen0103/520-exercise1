{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Checks if a string is \"happy\".\n    A string is happy if its length is at least 3 and every 3 consecutive\n    letters are distinct.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # 1. Initial Constraint Validation (Length Check)\n    # A string must have a length of at least 3 to be considered happy.\n    string_length = len(s)\n    if string_length < 3:\n        # If the length is less than 3, it fails the primary condition.\n        return False\n\n    # 2. Iteration Setup (Sliding Window)\n    # We iterate through the string using a sliding window of size 3.\n    # The loop stops at the index i where the triplet (s[i], s[i+1], s[i+2])\n    # is the last possible triplet in the string.\n    # This range is from 0 up to (length - 3). In Python, range(len - 2)\n    # covers indices 0 to len - 3.\n    for i in range(string_length - 2):\n\n        # 3. Consecutive Triplet Check\n        # Extract the current 3 consecutive characters.\n        c1, c2, c3 = s[i], s[i+1], s[i+2]\n\n        # Use a set to efficiently check for distinctness. A set only stores\n        # unique elements. If all three characters are distinct, the set size\n        # will be 3.\n        char_set = {c1, c2, c3}\n\n        # 4. Failure Handling (Early Exit)\n        # If the size of the set is less than 3, it means there is a duplicate\n        # character within the triplet (e.g., 'aa', 'aba', 'xyy').\n        if len(char_set) < 3:\n            # We found a non-happy triplet, so the entire string is not happy.\n            return False\n\n    # 4. Success Handling (Default Return)\n    # If the loop completes without finding any non-happy triplets, it means\n    # every 3 consecutive letters were distinct.\n    return True\n\n# --- Example Usage ---\nif __name__ == \"__main__\":\n    test_cases = {\n        \"a\": False,       # Length < 3\n        \"aa\": False,      # Length < 3\n        \"abcd\": True,     # ('a','b','c') -> 3 distinct, ('b','c','d') -> 3 distinct\n        \"aabb\": False,    # ('a','a','b') -> 2 distinct\n        \"adb\": True,      # ('a','d','b') -> 3 distinct\n        \"xyy\": False,     # ('x','y','y') -> 2 distinct\n        \"abcabc\": True,   # ('a','b','c'), ('b','c','a'), ('c','a','b'), ('a','b','c') all distinct\n        \"aabbaa\": False,  # Fails at ('a','a','b')\n        \"abcdef\": True,\n        \"abacaba\": False, # Fails at ('a','c','a')\n    }\n\n    print(\"--- Happy String Checker Results ---\")\n    for s, expected in test_cases.items():\n        result = is_happy(s)\n        status = \"PASS\" if result == expected else \"FAIL\"\n        print(f\"Input: '{s}' (Length: {len(s)})\")\n        print(f\"  Result: {result}, Expected: {expected} | {status}\")\n    print(\"------------------------------------\")"}
