{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculates the sum of all positive integers from 1 up to n using Gauss's formula.\n\n    This implementation uses the O(1) arithmetic series formula: n * (n + 1) / 2.\n\n    Args:\n        n: The upper bound integer. \n\n    Returns:\n        The sum of integers from 1 to n. Returns 0 if n is less than 1.\n\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    >>> sum_to_n(0)\n    0\n    \"\"\"\n    \n    # --- Input Validation and Constraints (Plan Step 3) ---\n    # The function is defined for summing positive integers (1 to n).\n    # If n is less than 1 (0 or negative), the sum of the series is \n    # considered 0, representing the sum over an empty set of positive integers.\n    if n < 1:\n        return 0\n\n    # --- Core Logic (Plan Steps 1, 2, 4) ---\n    # Calculate the sum using the direct mathematical formula (O(1) complexity):\n    # S = n * (n + 1) / 2\n    \n    # 1. Calculate the product n * (n + 1).\n    # 2. Perform integer division (//) by 2. This is crucial because n * (n + 1) \n    #    is always an even number, and integer division guarantees the result \n    #    remains an integer, fulfilling the required return type.\n    result = (n * (n + 1)) // 2\n\n    # --- Return Value (Plan Step 5) ---\n    return result\n\nif __name__ == '__main__':\n    # Executes the included doctests to verify functionality\n    import doctest\n    doctest.testmod()\n    \n    # Example usage\n    print(f\"Sum up to 5: {sum_to_n(5)}\")\n    print(f\"Sum up to 30: {sum_to_n(30)}\")\n    print(f\"Sum up to 100: {sum_to_n(100)}\")\n    print(f\"Sum up to -5 (should be 0): {sum_to_n(-5)}\")"}
