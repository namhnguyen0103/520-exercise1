{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with `encode_shift` and returns the decoded string.\n    This function reverses the Caesar cipher with a shift of +5 applied in `encode_shift`.\n\n    Each lowercase letter ('a' to 'z') is shifted backward by 5 positions in the alphabet,\n    wrapping around from 'a' back to 'z' as needed. Non-lowercase characters are preserved\n    unchanged for safety and readability.\n\n    Example:\n    >>> encode_shift(\"hello\")\n    'mjqqt'\n    >>> decode_shift(\"mjqqt\")\n    'hello'\n    >>> decode_shift(encode_shift(\"abc xyz!\"))\n    'abc xyz!'\n    >>> decode_shift(\"\")\n    ''\n    \"\"\"\n\n    # --- Step 1: Input validation ---\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # --- Step 2: Initialize output list ---\n    decoded_chars = []\n\n    # --- Step 3: Iterate through each character ---\n    for ch in s:\n        # Check if character is lowercase alphabetic\n        if 'a' <= ch <= 'z':\n            # Convert to index 0\u201325\n            index = ord(ch) - ord('a')\n\n            # Shift backward by 5, with modulo 26 to wrap around\n            new_index = (index - 5) % 26\n\n            # Convert back to character\n            decoded_char = chr(new_index + ord('a'))\n            decoded_chars.append(decoded_char)\n        else:\n            # Leave non-lowercase characters unchanged\n            decoded_chars.append(ch)\n\n    # --- Step 4: Combine list of characters into final string ---\n    return \"\".join(decoded_chars)"}
