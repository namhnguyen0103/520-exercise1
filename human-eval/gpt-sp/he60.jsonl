{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that returns the sum of all integers from 1 to n (inclusive).\n\n    The function uses the arithmetic series formula n*(n+1)/2 for O(1) computation time.\n\n    Parameters\n    ----------\n    n : int\n        A non-negative integer representing the upper bound of the sum.\n\n    Returns\n    -------\n    int\n        The sum of all integers from 1 to n (inclusive). Returns 0 if n == 0.\n\n    Raises\n    ------\n    TypeError\n        If n is not an integer (or if it\u2019s a boolean).\n    ValueError\n        If n is negative.\n\n    Examples\n    --------\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    >>> sum_to_n(0)\n    0\n    \"\"\"\n\n    # --- Step 1: Input validation ---\n    # Disallow boolean since bool is a subclass of int but semantically not valid here.\n    if isinstance(n, bool):\n        raise TypeError(\"Input must be an integer, not a boolean.\")\n\n    # Ensure the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(f\"Input must be an integer, got {type(n).__name__} instead.\")\n\n    # Negative values are not allowed since sum from 1 to n is undefined for n < 0\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # --- Step 2: Handle base case ---\n    if n == 0:\n        return 0\n\n    # --- Step 3: Compute using arithmetic series formula ---\n    # Use integer arithmetic carefully to avoid unnecessary large intermediate values\n    if n % 2 == 0:\n        # If n is even, divide n by 2 first\n        total = (n // 2) * (n + 1)\n    else:\n        # If n is odd, divide (n + 1) by 2 first\n        total = n * ((n + 1) // 2)\n\n    # --- Step 4: Return the computed sum ---\n    return total"}
