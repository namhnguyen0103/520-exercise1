{"task_id": "HumanEval/90", "completion": "import collections\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest unique element of the list.\n    Returns None if there is no such element (i.e., less than two unique elements).\n\n    Args:\n        lst (list[int]): The input list of integers.\n\n    Returns:\n        int | None: The second smallest unique element, or None if not found.\n    \"\"\"\n    # Phase 1: Data Pre-processing and Deduplication\n    # Convert the list to a set to efficiently eliminate all duplicate elements.\n    unique_elements_set = set(lst)\n\n    # Convert the set back to a list. This step is necessary as sets are unordered\n    # and do not support indexing required for the sorting and selection phase.\n    unique_elements = list(unique_elements_set)\n\n    # Phase 2: Edge Case Validation\n    # Check if there are at least two unique elements remaining.\n    # If the length is 0 (empty list), 1 (e.g., [5]), or 1 (e.g., [1, 1, 1]),\n    # there is no \"second smallest unique\" element.\n    if len(unique_elements) < 2:\n        return None\n\n    # Phase 3: Sorting and Element Selection\n    # Sort the list of unique elements in ascending order.\n    # This places the smallest element at index 0 and the second smallest at index 1.\n    unique_elements.sort()\n\n    # Access the element at index 1, which represents the second smallest unique value.\n    second_smallest = unique_elements[1]\n\n    # Phase 4: Final Output\n    return second_smallest\n\n# --- Example Usage and Verification ---\n\n# Example 1: Standard case\nprint(f\"next_smallest([1, 2, 3, 4, 5]) -> {next_smallest([1, 2, 3, 4, 5])}\")\n# Expected: 2\n\n# Example 2: Unsorted case with duplicates\nprint(f\"next_smallest([5, 1, 4, 3, 2, 3, 4, 5]) -> {next_smallest([5, 1, 4, 3, 2, 3, 4, 5])}\")\n# Expected: 2 (Unique elements: [1, 2, 3, 4, 5])\n\n# Example 3: Empty list (Edge Case)\nprint(f\"next_smallest([]) -> {next_smallest([])}\")\n# Expected: None\n\n# Example 4: List with only one unique element (Edge Case)\nprint(f\"next_smallest([1, 1]) -> {next_smallest([1, 1])}\")\n# Expected: None\n\n# Example 5: List with negative numbers\nprint(f\"next_smallest([-5, -1, -4, -3, -2]) -> {next_smallest([-5, -1, -4, -3, -2])}\")\n# Expected: -4 (Unique and sorted: [-5, -4, -3, -2, -1]. Index 1 is -4)\n\n# Example 6: Two unique elements\nprint(f\"next_smallest([10, 20, 10]) -> {next_smallest([10, 20, 10])}\")\n# Expected: 20"}
