{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Given a list of integers, this function returns the 2nd smallest unique\n    element of the list.\n    Returns None if there are fewer than two unique elements.\n    \"\"\"\n    # Step 1: Convert to a set to efficiently find all unique elements.\n    unique_elements = set(lst)\n\n    # Step 2: Convert the unique set back to a list and sort it in ascending order.\n    # This places the smallest unique element at index 0, and the second smallest at index 1.\n    unique_sorted = sorted(list(unique_elements))\n\n    # Step 3: Check if there are at least two unique elements.\n    # If the length is 0 (empty list) or 1 (e.g., [1] or [1, 1]), return None.\n    if len(unique_sorted) < 2:\n        return None\n    else:\n        # Step 4: The second smallest unique element is at index 1.\n        return unique_sorted[1]\n\n# Example usage and tests (as requested in the prompt)\n# print(f\"Test 1: [1, 2, 3, 4, 5] -> {next_smallest([1, 2, 3, 4, 5])}\")\n# print(f\"Test 2: [5, 1, 4, 3, 2] -> {next_smallest([5, 1, 4, 3, 2])}\")\n# print(f\"Test 3: [] -> {next_smallest([])}\")\n# print(f\"Test 4: [1, 1] -> {next_smallest([1, 1])}\")\n# print(f\"Test 5: [2, 1, 1, 3] -> {next_smallest([2, 1, 1, 3])}\") # Should be 2\n# print(f\"Test 6: [100] -> {next_smallest([100])}\") # Should be None"}
