{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every lowercase character by 5 in the alphabet.\n    \n    The encoding process:\n    1. Get the ASCII value of the character (ord(ch)).\n    2. Subtract ord('a') to get a 0-indexed position (0-25).\n    3. Add 5 for the forward shift.\n    4. Apply modulo 26 for wrap-around (z -> e).\n    5. Add ord('a') back to convert the position back to the character's ASCII code.\n    \"\"\"\n    # Note: This implementation assumes the input 's' contains only lowercase 'a'-'z'.\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input a string encoded with the encode_shift function (a +5 Caesar cipher). \n    Returns the original decoded string by applying an inverse -5 shift.\n    \n    The decoding process applies the inverse modular arithmetic:\n    1. Convert the character to its 0-indexed position (ord(ch) - ord('a')).\n    2. Subtract the shift amount (5).\n    3. Apply modulo 26 to ensure proper wrap-around for negative results \n       (e.g., 'e' -> 'z' is handled by -1 % 26 == 25 in Python).\n    4. Add ord('a') back to get the ASCII value of the original character.\n    5. Convert the ASCII value back to a character (chr()).\n    \"\"\"\n    \n    # We use a list comprehension for efficient, one-line iteration and transformation.\n    return \"\".join([\n        chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) \n        for ch in s\n    ])\n\n# Example Usage and Verification:\nif __name__ == '__main__':\n    original_string = \"hello\"\n    \n    # 1. Encoding\n    encoded_string = encode_shift(original_string)\n    print(f\"Original String: {original_string}\")\n    print(f\"Encoded String (Shift +5): {encoded_string}\") # Should be 'mjqqt'\n    \n    # 2. Decoding\n    decoded_string = decode_shift(encoded_string)\n    print(f\"Decoded String (Shift -5): {decoded_string}\") # Should be 'hello'\n\n    # Example with wrap-around ('a' -> 'f', 'z' -> 'e', 'b' -> 'g')\n    wrap_test_original = \"abz\"\n    wrap_test_encoded = encode_shift(wrap_test_original)\n    print(f\"\\nWrap Test Original: {wrap_test_original}\") # 'abz'\n    print(f\"Wrap Test Encoded: {wrap_test_encoded}\") # 'fge' (a+5=f, b+5=g, z+5=e)\n\n    wrap_test_decoded = decode_shift(wrap_test_encoded)\n    print(f\"Wrap Test Decoded: {wrap_test_decoded}\") # 'abz'"}
