{"task_id": "HumanEval/70", "completion": "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Return the list in \"strange\" order:\n      - repeatedly take the minimum of the remaining elements,\n        then the maximum of the remaining elements, alternating\n        until all elements are consumed.\n\n    The input list is NOT mutated.\n\n    Examples:\n        >>> strange_sort_list([1, 2, 3, 4])\n        [1, 4, 2, 3]\n        >>> strange_sort_list([5, 5, 5, 5])\n        [5, 5, 5, 5]\n        >>> strange_sort_list([])\n        []\n        >>> strange_sort_list([-3, -1, -2, 0, 2])\n        [-3, 2, -2, 0, -1]\n    \"\"\"\n    n = len(lst)\n    # Handle trivial lengths quickly and without mutating the input.\n    if n <= 1:\n        # Return a shallow copy to match \"do not mutate\" and be explicit.\n        return lst[:]\n\n    # Sort a COPY in ascending order; do not mutate the caller's list.\n    arr = sorted(lst)\n\n    # Two-pointer sweep: low -> current minimum, high -> current maximum.\n    low, high = 0, n - 1\n\n    # Start by taking the minimum, then alternate min/max each step.\n    take_low = True\n\n    result: List[int] = []\n\n    # Loop until all elements are consumed.\n    # Invariant: arr[low:high+1] are exactly the remaining elements in ascending order.\n    while low <= high:\n        if take_low:\n            # Take the minimum of the remaining elements.\n            result.append(arr[low])\n            low += 1\n        else:\n            # Take the maximum of the remaining elements.\n            result.append(arr[high])\n            high -= 1\n\n        # Flip the turn for next iteration.\n        take_low = not take_low\n\n    return result\n\n\n# --- Optional lightweight tests (can be removed in production if not needed) ---\nif __name__ == \"__main__\":\n    cases = [\n        ([], []),\n        ([1], [1]),\n        ([1, 2], [1, 2]),\n        ([2, 1], [1, 2]),\n        ([1, 2, 3, 4], [1, 4, 2, 3]),\n        ([5, 5, 5, 5], [5, 5, 5, 5]),\n        ([-3, -1, -2, 0, 2], [-3, 2, -2, 0, -1]),\n        ([9, 7, 7, 1, 3], [1, 9, 3, 7, 7]),\n    ]\n    for inp, expected in cases:\n        out = strange_sort_list(inp)\n        assert out == expected, f\"Input: {inp} | Expected: {expected} | Got: {out}\"\n    print(\"All tests passed.\")"}
